{"ast":null,"code":"const express = require('express');\nconst mongoose = require('mongoose');\nconst bodyParser = require('body-parser');\nconst app = express();\nconst PORT = 5000;\napp.use(bodyParser.json());\n\n// Connect to MongoDB\nmongoose.connect('mongodb://localhost:27017/your_database_name', {\n  useNewUrlParser: true,\n  useUnifiedTopology: true\n});\n\n// Define a user schema\nconst userSchema = new mongoose.Schema({\n  name: String,\n  email: String,\n  password: String,\n  location: String\n});\nconst User = mongoose.model('User', userSchema);\n\n// Route for user registration\napp.post('/api/createuser', async (req, res) => {\n  try {\n    const {\n      name,\n      email,\n      password,\n      location\n    } = req.body;\n\n    // Validate input (you might want to add more validation)\n    if (!name || !email || !password || !location) {\n      return res.json({\n        success: false,\n        message: 'Invalid input'\n      });\n    }\n\n    // Check if the user with the same email already exists\n    const existingUser = await User.findOne({\n      email\n    });\n    if (existingUser) {\n      return res.json({\n        success: false,\n        message: 'User already exists'\n      });\n    }\n\n    // Create a new user\n    const newUser = new User({\n      name,\n      email,\n      password,\n      location\n    });\n    await newUser.save();\n\n    // Respond with success\n    return res.json({\n      success: true,\n      message: 'User registered successfully'\n    });\n  } catch (error) {\n    console.error('Error during registration:', error);\n    return res.status(500).json({\n      success: false,\n      message: 'Internal server error'\n    });\n  }\n});\napp.listen(PORT, () => {\n  console.log(`Server is running on port ${PORT}`);\n});","map":{"version":3,"names":["express","require","mongoose","bodyParser","app","PORT","use","json","connect","useNewUrlParser","useUnifiedTopology","userSchema","Schema","name","String","email","password","location","User","model","post","req","res","body","success","message","existingUser","findOne","newUser","save","error","console","status","listen","log"],"sources":["C:/Users/HP/GOFOOD/mernapp/src/screens/Signup.js"],"sourcesContent":["const express = require('express');\r\nconst mongoose = require('mongoose');\r\nconst bodyParser = require('body-parser');\r\n\r\nconst app = express();\r\nconst PORT = 5000;\r\n\r\napp.use(bodyParser.json());\r\n\r\n// Connect to MongoDB\r\nmongoose.connect('mongodb://localhost:27017/your_database_name', {\r\n  useNewUrlParser: true,\r\n  useUnifiedTopology: true,\r\n});\r\n\r\n// Define a user schema\r\nconst userSchema = new mongoose.Schema({\r\n  name: String,\r\n  email: String,\r\n  password: String,\r\n  location: String,\r\n});\r\n\r\nconst User = mongoose.model('User', userSchema);\r\n\r\n// Route for user registration\r\napp.post('/api/createuser', async (req, res) => {\r\n  try {\r\n    const { name, email, password, location } = req.body;\r\n\r\n    // Validate input (you might want to add more validation)\r\n    if (!name || !email || !password || !location) {\r\n      return res.json({ success: false, message: 'Invalid input' });\r\n    }\r\n\r\n    // Check if the user with the same email already exists\r\n    const existingUser = await User.findOne({ email });\r\n    if (existingUser) {\r\n      return res.json({ success: false, message: 'User already exists' });\r\n    }\r\n\r\n    // Create a new user\r\n    const newUser = new User({ name, email, password, location });\r\n    await newUser.save();\r\n\r\n    // Respond with success\r\n    return res.json({ success: true, message: 'User registered successfully' });\r\n  } catch (error) {\r\n    console.error('Error during registration:', error);\r\n    return res.status(500).json({ success: false, message: 'Internal server error' });\r\n  }\r\n});\r\n\r\napp.listen(PORT, () => {\r\n  console.log(`Server is running on port ${PORT}`);\r\n});\r\n"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMC,QAAQ,GAAGD,OAAO,CAAC,UAAU,CAAC;AACpC,MAAME,UAAU,GAAGF,OAAO,CAAC,aAAa,CAAC;AAEzC,MAAMG,GAAG,GAAGJ,OAAO,CAAC,CAAC;AACrB,MAAMK,IAAI,GAAG,IAAI;AAEjBD,GAAG,CAACE,GAAG,CAACH,UAAU,CAACI,IAAI,CAAC,CAAC,CAAC;;AAE1B;AACAL,QAAQ,CAACM,OAAO,CAAC,8CAA8C,EAAE;EAC/DC,eAAe,EAAE,IAAI;EACrBC,kBAAkB,EAAE;AACtB,CAAC,CAAC;;AAEF;AACA,MAAMC,UAAU,GAAG,IAAIT,QAAQ,CAACU,MAAM,CAAC;EACrCC,IAAI,EAAEC,MAAM;EACZC,KAAK,EAAED,MAAM;EACbE,QAAQ,EAAEF,MAAM;EAChBG,QAAQ,EAAEH;AACZ,CAAC,CAAC;AAEF,MAAMI,IAAI,GAAGhB,QAAQ,CAACiB,KAAK,CAAC,MAAM,EAAER,UAAU,CAAC;;AAE/C;AACAP,GAAG,CAACgB,IAAI,CAAC,iBAAiB,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EAC9C,IAAI;IACF,MAAM;MAAET,IAAI;MAAEE,KAAK;MAAEC,QAAQ;MAAEC;IAAS,CAAC,GAAGI,GAAG,CAACE,IAAI;;IAEpD;IACA,IAAI,CAACV,IAAI,IAAI,CAACE,KAAK,IAAI,CAACC,QAAQ,IAAI,CAACC,QAAQ,EAAE;MAC7C,OAAOK,GAAG,CAACf,IAAI,CAAC;QAAEiB,OAAO,EAAE,KAAK;QAAEC,OAAO,EAAE;MAAgB,CAAC,CAAC;IAC/D;;IAEA;IACA,MAAMC,YAAY,GAAG,MAAMR,IAAI,CAACS,OAAO,CAAC;MAAEZ;IAAM,CAAC,CAAC;IAClD,IAAIW,YAAY,EAAE;MAChB,OAAOJ,GAAG,CAACf,IAAI,CAAC;QAAEiB,OAAO,EAAE,KAAK;QAAEC,OAAO,EAAE;MAAsB,CAAC,CAAC;IACrE;;IAEA;IACA,MAAMG,OAAO,GAAG,IAAIV,IAAI,CAAC;MAAEL,IAAI;MAAEE,KAAK;MAAEC,QAAQ;MAAEC;IAAS,CAAC,CAAC;IAC7D,MAAMW,OAAO,CAACC,IAAI,CAAC,CAAC;;IAEpB;IACA,OAAOP,GAAG,CAACf,IAAI,CAAC;MAAEiB,OAAO,EAAE,IAAI;MAAEC,OAAO,EAAE;IAA+B,CAAC,CAAC;EAC7E,CAAC,CAAC,OAAOK,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IAClD,OAAOR,GAAG,CAACU,MAAM,CAAC,GAAG,CAAC,CAACzB,IAAI,CAAC;MAAEiB,OAAO,EAAE,KAAK;MAAEC,OAAO,EAAE;IAAwB,CAAC,CAAC;EACnF;AACF,CAAC,CAAC;AAEFrB,GAAG,CAAC6B,MAAM,CAAC5B,IAAI,EAAE,MAAM;EACrB0B,OAAO,CAACG,GAAG,CAAE,6BAA4B7B,IAAK,EAAC,CAAC;AAClD,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}